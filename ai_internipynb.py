# -*- coding: utf-8 -*-
"""ai-internipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LHrQo5pQuFMOL5V8myA7QBCLZURbAmud
"""

pip install pandas numpy scikit-learn matplotlib seaborn

import pandas as pd
  # Load the ratings and movies data
 ratings = pd.read_csv('/content/drive/MyDrive/rating.csv')
 movies = pd.read_csv('/content/drive/MyDrive/movie.csv')
  # Display the first few rows of the datasets
 print(ratings.head())
 print(movies.head())

import pandas as pd

# Load the ratings and movies data
ratings = pd.read_csv('/content/drive/MyDrive/rating.csv')
# Try reading with 'latin-1' encoding
try:
    movies = pd.read_csv('/content/drive/MyDrive/movie.csv', encoding='latin-1')
except UnicodeDecodeError:
    # If 'latin-1' fails, try another common encoding like 'cp1252' (Windows-1252)
    movies = pd.read_csv('/content/drive/MyDrive/movie.csv', encoding='cp1252')


# Display the first few rows of the datasets
print(ratings.head())
print(movies.head())

# Merge ratings with movie titles
data = pd.merge(ratings, movies, on='movieId')
# Check for missing values
print(data.isnull().sum())
# Drop any rows with missing values
data.dropna(inplace=True)

# Create a user-item matrix
user_item_matrix = data.pivot_table(index='userId', columns='title', values='rating')
print(user_item_matrix.head())

# Fill NaN values with 0
user_item_matrix.fillna(0, inplace=True)

from sklearn.metrics.pairwise import cosine_similarity

# Calculate cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

def get_recommendations(user_id, num_recommendations=5):
    # Get similar users
    similar_users = user_similarity_df[user_id].sort_values(ascending=False).index[1:num_recommendations + 1]

    # Get movie recommendations based on similar users
    recommended_movies = user_item_matrix.loc[similar_users].mean(axis=0).sort_values(ascending=False)

    # Return top recommended movies
    return recommended_movies.head(num_recommendations)

# Example usage
recommendations = get_recommendations(user_id=1, num_recommendations=5)
print(recommendations)

# Merge ratings with movie titles
data = pd.merge(ratings, movies, on='movieId')
  # Check for missing values
print(data.isnull().sum())
  # Drop any rows with missing values
data.dropna(inplace=True)

# Create a user-item matrix
user_item_matrix = data.pivot_table(index='userId', columns='title', values='rating')
print(user_item_matrix.head())

# Fill NaN values with 0
user_item_matrix.fillna(0, inplace=True)

from sklearn.metrics.pairwise import cosine_similarity
  # Calculate cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

def get_recommendations(user_id, num_recommendations=5):
      # Get similar users
      similar_users = user_similarity_df[user_id].sort_values(ascending=False).index[1:num_recommendations + 1]

      # Get movie recommendations based on similar users
      recommended_movies = user_item_matrix.loc[similar_users].mean(axis=0).sort_values(ascending=False)

      # Return top recommended movies
      return recommended_movies.head(num_recommendations)
  # Example usage
recommendations = get_recommendations(user_id=1, num_recommendations=5)
print(recommendations)

import matplotlib.pyplot as plt
def plot_recommendations(recommendations):
      recommendations.plot(kind='bar', figsize=(10, 5))
      plt.title('Top Movie Recommendations')
      plt.xlabel('Movies')
      plt.ylabel('Average Rating')
      plt.xticks(rotation=45)
      plt.show()
  # Plot the recommendations
plot_recommendations(recommendations)